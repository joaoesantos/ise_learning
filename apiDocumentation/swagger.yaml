openapi: 3.0.0
info:
  description: This is the ISE-Learning REST API
  version: "0.0.0"
  title: ISE-Learning REST API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Execution Environments
    description: Operations for accessing the execution environments.
  - name: Execute
    description: Operations for executing code remotely.
  - name: Challenges
    description: Operations for managing the challenges.
  - name: Challenge Answer
    description: Operations for managing the challenge answers.
  - name: Challenge Tags
    description: Operations for managing the challenge tags.
  - name: Tags
    description: Operations for managing the tags.
  - name: Users
    description: Operations for managing user's profile
paths:
  /:
    post:
      tags:
        - Execution Environments
      summary: Execute code or unit tests sent
      operationId: execute
      description: |
        Executes code or unit tests sent, depending on the value of "executeTests" field.
      requestBody:
        description: Code and unit tests to be executed.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executable'
      responses:
        '200':
          description: Code result
          content:
            application/json:
              schema:
                type: object
                properties:
                  rawResult:
                    type: string
                    description: Result or execution of compilation.
                    example: "Hello World"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                    errorMessage:
                      type: string
                      description: Technical error message.
                      example: "Cannot parse public class name from code."
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                    errorMessage:
                      type: string
                      description: Technical error message.
                      example: "Method not supported"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                      type: string
                      description: Technical error message.
                      example: "Internal Server Error"
  /v0/execute:
    post:
      tags:
        - Execute
      summary: Remote code execution
      operationId: executeCode
      description: |
        Requests the server to execute code remotely.
      requestBody:
        description: Code to be executed.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executableWithLanguage'
      responses:
        '200':
          description: Successful executed the code.
          content:
            application/json:
              schema:
                type: object
                properties:
                  rawResult:
                    type: string
                    description: Result or execution of compilation.
                    example: "Hello World"
  /v0/challenges:
    get:
      tags:
        - Challenges
      summary: Retreives all challenges
      operationId: getAllChallenges
      description: |
        Retrieves every challenge the user has read access to.
      parameters:
        - in: query
          name: privacy
          schema:
            type: string
            enum: [private, public]
          required: false
          description: Optional filtering condition determining whether public or private challenges will be returned.
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          required: false
          description: Optional parameter filtering challenges by tags.
      responses:
        '200':
          description: List of challenges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    description: List of challenges.
                    items:
                      $ref: '#/components/schemas/challenge'
    post:
      tags:
        - Challenges
      summary: Creates a challenge
      operationId: createsChallenge
      description: |
        Creates a challenge based on payload content.
      requestBody:
        description: Challenge to be created.
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/challengeNoIdNoSolutionID'
      responses:
        '201':
          description: Successful challenge created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    $ref: '#/components/schemas/challenge'
  /v0/challenges/{challengeId}:
    get:
      tags:
        - Challenges
      summary: Retreives a challenge
      operationId: getChallenge
      description: |
        Retrieves every challenge the user has read access to.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
      responses:
        '200':
          description: Challenge
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    $ref: '#/components/schemas/challenge'
    put:
      tags:
        - Challenges
      summary: Updates a challenge
      operationId: updateChallenge
      description: |
        Updates a challenge based on payload content and the id on the uri.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
      requestBody:
        description: Challenge to be updated.
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/challengeNoId'
      responses:
        '200':
          description: Successful updated challenge.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    $ref: '#/components/schemas/challenge'
    delete:
      tags:
        - Challenges
      summary: Deletes a challenge
      operationId: deleteChallenge
      description: |
        Delete a challenge based on the id on the uri.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
      responses:
        '204':
          description: Successful deleted challenge.
          content:
            application/json:
              schema:
                type: object
  /v0/challenges/users/{userId}:
    get:
      tags:
        - Challenges
      summary: Retreives all challenges of a given user
      operationId: getUserChallenges
      description: |
        Retrieves every challenge of a given user.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User unique id.
        - in: query
          name: privacy
          schema:
            type: string
            enum: [private, public]
          required: false
          description: Optional filtering condition determining whether public or private challenges will be returned.
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          required: false
          description: Optional parameter filtering challenges by tags.
      responses:
        '200':
          description: User challenge list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    description: List of challenges from a given user.
                    items:
                      $ref: '#/components/schemas/challenge'
  /v0/challenges/{challengeId}/answers/{userId}:
    get:
      tags:
        - Challenges
      summary: Retreives a challenge answer
      operationId: getChallengeAnswer
      description: |
        Retrieves every challenge answer of the user for a specific challenge.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User unique id.
      responses:
        '200':
          description: Challenge answer
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    $ref: '#/components/schemas/challengeAnswer'
  /v0/challengeAnswers:
    post:
      tags:
        - Challenge Answer
      summary: Creates a challenge answer
      operationId: createsChallengeAnswer
      description: |
        Creates a challenge answer.
      requestBody:
        description: Challenge answer to be created.
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/challengeAnswerNoID'
      responses:
        '201':
          description: Successfully created challenge answer.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    $ref: '#/components/schemas/challengeAnswer'
  /v0/challengeAnswers/{challengeAnswerId}:
    put:
      tags:
        - Challenge Answer
      summary: Updates a challenge answer
      operationId: updateChallengeAnswer
      description: |
        Updates a challenge answer.
      parameters:
        - in: path
          name: challengeAnswerId
          schema:
            type: integer
          required: true
          description: Challenge answer unique id.
      requestBody:
        description: Challenge to be updated.
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/challengeAnswerNoID'
      responses:
        '200':
          description: Successful updated challenge answer.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    $ref: '#/components/schemas/challengeAnswer'
    delete:
      tags:
        - Challenge Answer
      summary: Deletes a challenge answer
      operationId: deleteChallengeAnswer
      description: |
        Delete a challenge answer of the used for a specific challenge.
      parameters:
        - in: path
          name: challengeAnswerId
          schema:
            type: integer
          required: true
          description: Challenge answer unique id.
      responses:
        '204':
          description: Successful deleted challenge answer.
          content:
            application/json:
              schema:
                type: object
  /v0/challenges/{challengeId}/tags:
    get:
      tags:
        - Challenge Tags
      summary: Retreives all challenge tags from a challenge
      operationId: getAllChallengeTagsByChallengeId
      description: |
        Retrieves every challenge tag associated to a specific challenge.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
      responses:
        '200':
          description: List of tags.
    post:
      tags:
        - Challenge Tags
      summary: Associates a tag with a Challenge
      operationId: createsChallengeTag
      description: |
        Associates a tag with a specific challenge.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
      requestBody:
        description: Challenge tag to be created.
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/challengeTagInputModel'
      responses:
        '201':
          description: Successful challenge tag created.
                    type: object
                    $ref: '#/components/schemas/tag'
                properties:
                  payload:
                    type: object
                    $ref: '#/components/schemas/challengeTag'
  /v0/challenges/{challengeId}/tags/{tagId}:
    get:
      tags:
        - Challenge Tags
      summary: Retreives specific challenge tag from a challenge
      operationId: getAllChallengeTagsByChallengeIdAnTagText
      description: |
        Retrieves challenge tag associated to a specific challenge with a specific tag id.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
        - in: path
          name: tagId
          schema:
            type: integer
          required: true
          description: Tag unique id.
      responses:
        '200':
          description: Specific challenge tag.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    description: Challenge tag.
                    items:
                      $ref: '#/components/schemas/challengeTag'
    delete:
      tags:
        - Challenge Tags
      summary: Delete specific challenge tag from a challenge
      operationId: deleteAllChallengeTagsByChallengeIdAnTagText
      description: |
        Delete challenge tag associated to a specific challenge with a specific tag id.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
        - in: path
          name: tagId
          schema:
            type: integer
          required: true
          description: Tag unique id.
      responses:
        '204':
          description: Successful deleted challenge tag.
          content:
            application/json:
              schema:
                type: object
  /v0/tags:
    get:
      tags:
        - Tags
      summary: Retreives all tags
      operationId: getAllTags
      description: |
        Retrieves every tag.
      responses:
        '200':
          description: Tag list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    description: Tag list.
                    items:
                      $ref: '#/components/schemas/tag'
  /v0/users/{userId}:  
    get:
      tags:
        - User
      summary: Retreives an user
      operationId: getUser
      description: |
        Retrive an user's information.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User's unique id.
      responses:
        '200':
          description: User
                    $ref: '#/components/schemas/user'
    delete:
      tags:
        - User
      summary: Deletes an user
      operationId: deleteUser
      description: |
        Delete an user.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User's unique id.
      responses:
        '204':
          description: Successful deleted user.
          content:
            application/json:
              schema:
                type: object      
components:
  schemas:
    executable:
      type: object
      required:
        - code
        - executeTests
      properties:
        code:
          type: string
          example: 'public class code { public static void main(String[] args) { System.out.println(\"Hello World\");}}'
          description: Code must be ready to execute in typical execution format depending on language
        unitTests:
          type: string
          example: 'import org.junit.Assert;import org.junit.Test;public class unitTests {@Test public void TestCase1() {Assert.assertTrue(true);}}'
          description: Unit Tests must be ready to execute in typical execution format depending on language
        executeTests:
          type: boolean
          example: true
          description: If the value is true unit tests will be executed and its result will be returned, for false values the code will be executed without the unit tests.
    executableWithLanguage:
      type: object
      required:
        - language
        - code
        - executeTests
      properties:
        language:
          type: string
          enum: [java, kotlin, javascript, csharp, python]
          example: 'java'
          description: Text representing one of the supported languages, must be lowercase
        code:
          type: string
          example: 'public class code { public static void main(String[] args) { System.out.println(\"Hello World\");}}'
          description: Code must be ready to execute in typical execution format depending on language
        unitTests:
          type: string
          example: 'import org.junit.Assert;import org.junit.Test;public class unitTests {@Test public void TestCase1() {Assert.assertTrue(true);}}'
          description: Unit Tests must be ready to execute in typical execution format depending on language
        executeTests:
          type: boolean
          example: true
          description: If the value is true unit tests will be executed and its result will be returned, for false values the code will be executed without the unit tests.
    challenge:
      type: object
      required:
        - challengeID
        - challengeText
        - isPrivate
        - solutions
      properties:
        challengeID:
          type: integer
          example: 548
          description: Unique identifier of challenge.
        challengeText:
          type: string
          example: 'Implement Hello world, by printing Hello world into the console.'
          description: Test describing the challenge and its goal.
        isPrivate:
          type: boolean
          example: true
          description: Boolean value indicating whether the challenge can only be seen by its creator
        solutions:
          type: array
          description: List of challenges.
          items:
            $ref: '#/components/schemas/solution'
    challengeNoId:
      type: object
      required:
        - challengeText
        - isPrivate
        - solutions
      properties:
        challengeText:
          type: string
          example: 'Implement Hello world, by printing Hello world into the console.'
          description: Test describing the challenge and its goal.
        isPrivate:
          type: boolean
          example: true
          description: Boolean value indicating whether the challenge can only be seen by its creator
        solutions:
          type: array
          description: List of challenges.
          items:
            $ref: '#/components/schemas/solution'
    challengeNoIdNoSolutionID:
      type: object
      required:
        - challengeText
        - isPrivate
        - solutions
      properties:
        challengeText:
          type: string
          example: 'Implement Hello world, by printing Hello world into the console.'
          description: Test describing the challenge and its goal.
        isPrivate:
          type: boolean
          example: true
          description: Boolean value indicating whether the challenge can only be seen by its creator
        solutions:
          type: array
          description: List of challenges.
          items:
            $ref: '#/components/schemas/solutionNoID'
    solution:
      type: object
      required:
        - solutionId
        - codeLanguage
        - challengeCode
        - solutionCode
        - unitTests
      properties:
        solutionId:
          type: integer
          example: 79884
          description: Unique id to which uniquely identifies the solution.
        codeLanguage:
          type: string
          example: 'java'
          description: Text specifying in which language the solution is.
        challengeCode:
          type: string
          example: 'public class code { public static void main(String[] args) { }}'
          description: Default code of the code presented to user.
        solutionCode:
          type: string
          example: 'public class code { public static void main(String[] args) { System.out.println(\"Hello World\");}}'
          description: Solution of the challenge.
        unitTests:
          type: string
          example: 'import org.junit.Assert;import org.junit.Test;public class unitTests {@Test public void TestCase1() {Assert.assertTrue(true);}}'
          description: Unit tests to which the the user submitted will be tested against.
    solutionNoID:
      type: object
      required:
        - codeLanguage
        - challengeCode
        - solutionCode
        - unitTests
      properties:
        codeLanguage:
          type: string
          example: 'java'
          description: Text specifying in which language the solution is.
        challengeCode:
          type: string
          example: 'public class code { public static void main(String[] args) { }}'
          description: Default code of the code presented to user.
        solutionCode:
          type: string
          example: 'public class code { public static void main(String[] args) { System.out.println(\"Hello World\");}}'
          description: Solution of the challenge.
        unitTests:
          type: string
          example: 'import org.junit.Assert;import org.junit.Test;public class unitTests {@Test public void TestCase1() {Assert.assertTrue(true);}}'
          description: Unit tests to which the the user submitted will be tested against.
    challengeAnswer:
      type: object
      required:
        - challengeAnswerId
        - challengeId
        - userID
        - codeLanguage
        - answerCode
        - unitTests
        - isCorrect
      properties:
        challengeAnswerId:
          type: integer
          example: 6546
          description: Unique id to which uniquely identify the challenge answer.
        challengeId:
          type: integer
          example: 55874
          description: Unique challenge id to which the answer belongs to.
        userID:
          type: integer
          example: 54954
          description: Unique user id of user to which the answer belongs to.
        codeLanguage:
          type: string
          example: "Java"
          description: Text identifying the programming language of the answer.
        answerCode:
          type: string
          example: 'public class code { public static void main(String[] args) { System.out.println(\"Hello World\");}}'
          description: Solution of the challenge submitted.
        unitTests:
          type: string
          example: 'import org.junit.Assert;import org.junit.Test;public class unitTests {@Test public void TestCase1() {Assert.assertTrue(true);}}'
          description: Unit tests developed by the user.
        isCorrect:
          type: boolean
          example: true
          description: Boolean indicating if this answer is correct or not.
    challengeAnswerNoID:
      type: object
      required:
        - challengeId
        - userID
        - codeLanguage
        - answerCode
        - unitTests
        - isCorrect
      properties:
        challengeId:
          type: integer
          example: 55874
          description: Unique challenge id to which the aswer belongs to.
        userID:
          type: integer
          example: 54954
          description: Unique user id of user to which the aswer belongs to.
        codeLanguage:
          type: string
          example: "Java"
          description: Text identifying the programming language of the answer.
        answerCode:
          type: string
          example: 'public class code { public static void main(String[] args) { System.out.println(\"Hello World\");}}'
          description: Solution of the challenge submitted.
        unitTests:
          type: string
          example: 'import org.junit.Assert;import org.junit.Test;public class unitTests {@Test public void TestCase1() {Assert.assertTrue(true);}}'
          description: Unit tests developed by the user.
        isCorrect:
          type: boolean
          example: true
          description: Boolean indicating if this answer is correct or not.
    challengeTag:
      type: object
      required:
        - challengeTagId
        - challengeId
        - tag
      properties:
        challengeTagId:
          type: integer
          example: 55874
          description: Unique challenge tag id.
        challengeId:
          type: integer
          example: 55874
          description: Unique challenge id to which the tag belongs to.
        tag:
          type: object
          description: Unique challenge id to which the aswer belongs to.
          $ref: '#/components/schemas/tag'
    tag:
      type: object
      required:
        - tagId
        - tag
      properties:
        tagId:
          type: integer
          example: 55874
          description: Unique tag id.
        tag:
          type: string
          example: 'Array'
          description: Unique tag text.
    challengeTagInputModel:
      type: object
      required:
        - tag
      properties:
        tag:
          type: string
          example: 'Array'
          description: Unique tag text.
    createUser:
      type: object
      required:
       - name
       - username
       - email
       - password
      properties:
       name:
          type: string
          example: "John Doe"
          description: User's given name
        username:
          type: string
          example: "userOne"
          description: Unique string used to identify an user
        email:
          type: string
          example: "userOne@example.com"
          description: Email address which can be used to contact user
        password:
          type: string
          example: "password12345"
          description: string used for User's authentication
    user:
      type: object
      properties:
        id: 
          type: integer
          example: 523
          description: Unique id which uniquely identifies the user
        username:
          type: string
          example: "userOne"
          description: Unique string used to identify an user
        email:
          type: string
          example: "userOne@example.com"
          description: Email address which can be used to contact user
        name:
          type: string
          example: "John Doe"
          description: User's given name
    updatePassword:
      type: object
        required:
          - password
        properties:
          password:
            type: string
            example: "password12345"
            description: string used for User's authentication
    updateProfile:
      type: object
      required:
         - name
         - email
      properties:
        name:
          type: string
          example: "John Doe"
          description: User's given name
        email:
          type: string
          example: "userOne@example.com"
          description: Email address which can be used to contact user  


