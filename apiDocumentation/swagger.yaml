openapi: 3.0.0
info:
  description: This is the ISE-Learning REST API
  version: 0.0.0
  title: ISE-Learning REST API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Execution Environments
    description: Operations for accessing the execution environments.
  - name: Execute
    description: Operations for executing code remotely.
  - name: Users
    description: Operations for managing user's profile
  - name: Challenges
    description: Operations for managing the challenges.
  - name: Challenge Answer
    description: Operations for managing the challenge answers.
  - name: Challenge Tags
    description: Operations for managing the challenge tags.
  - name: Tags
    description: Operations for managing the tags.
  - name: Questionnaires
    description: Operations for managing the questionnaires.
  - name: Questionnaire Instances
    description: Operations for managing the questionnaire instances.
  - name: Questionnaire-Challenges
    description: Operations for managing the questionnaire-challenges.
  - name: Questionnaire Answers
    description: Operations for managing the questionnaire answers.
  - name: Code Languages
    description: Operations for managing the supported code languages.
paths:
  '/':
    post:
      tags:
        - Execution Environments
      summary: Execute code or unit tests sent
      operationId: execute
      description: >
        Executes code or unit tests sent, depending on the value of
        "executeTests" field.
      requestBody:
        description: Code and unit tests to be executed.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executable'
      responses:
        '200':
          description: Code result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/executionResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
                    description: Technical error message.
                    example: Cannot parse public class name from code.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
                    description: Technical error message.
                    example: Method not supported
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
                    description: Technical error message.
                    example: Internal Server Error
  '/v0/execute':
    post:
      tags:
        - Execute
      summary: Remote code execution
      operationId: executeCode
      description: |
        Requests the server to execute code remotely.
      requestBody:
        description: Code to be executed.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/executableWithLanguage'
      responses:
        '200':
          description: Successful executed the code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/executionResult'
  '/v0/users':
    get:
      tags:
        - Users
      summary: Gets all users information
      operationId: getUsers
      description: |
        Gets all users information.
      responses:
        '200':
          description: Retrieves all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/user'
    post:
      tags:
        - Users
      summary: Creates an user
      operationId: createUser
      description: Creates an user based on payload content
      requestBody:
            required: true
            description: User's information
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/user'
      responses:
        '201':
          description: User created successfuly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
  '/v0/users/{userId}':  
    get:
      tags:
        - Users
      summary: Retreives an user
      operationId: getUser
      description: |
        Retrive an user's information.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User's unique id.
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/user'
    delete:
      tags:
        - Users
      summary: Deletes an user
      operationId: deleteUser
      description: |
        Delete an user.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User's unique id.
      responses:
        '204':
          description: Successful deleted user.
          content:
            application/json:
              schema:
                type: object   
  '/v0/challenges':
    get:
      tags:
        - Challenges
      summary: Retreives all challenges
      operationId: getAllChallenges
      description: |
        Retrieves every challenge the user has read access to.
      parameters:
        - in: query
          name: privacy
          schema:
            type: string
            enum:
              - private
              - public
          required: false
          description: >-
            Optional filtering condition determining whether public or private
            challenges will be returned.
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          required: false
          description: Optional parameter filtering challenges by tags.
      responses:
        '200':
          description: List of challenges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    description: List of challenges.
                    items:
                      $ref: '#/components/schemas/challenge'
    post:
      tags:
        - Challenges
      summary: Creates a challenge
      operationId: createsChallenge
      description: |
        Creates a challenge based on payload content.
      requestBody:
        description: Challenge to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/challengeNoIdNoSolutionID'
      responses:
        '201':
          description: Successful challenge created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/challenge'
  '/v0/challenges/{challengeId}':
    get:
      tags:
        - Challenges
      summary: Retreives a challenge
      operationId: getChallenge
      description: |
        Retrieves every challenge the user has read access to.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
      responses:
        '200':
          description: Challenge
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    $ref: '#/components/schemas/challenge'
    put:
      tags:
        - Challenges
      summary: Updates a challenge
      operationId: updateChallenge
      description: |
        Updates a challenge based on payload content and the id on the uri.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
      requestBody:
        description: Challenge to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/challengeNoId'
      responses:
        '200':
          description: Successful updated challenge.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/challenge'
    delete:
      tags:
        - Challenges
      summary: Deletes a challenge
      operationId: deleteChallenge
      description: |
        Delete a challenge based on the id on the uri.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
      responses:
        '204':
          description: Successful deleted challenge.
          content:
            application/json:
              schema:
                type: object
  '/v0/challenges/users/{userId}':
    get:
      tags:
        - Challenges
      summary: Retreives all challenges of a given user
      operationId: getUserChallenges
      description: |
        Retrieves every challenge of a given user.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User unique id.
        - in: query
          name: privacy
          schema:
            type: string
            enum:
              - private
              - public
          required: false
          description: >-
            Optional filtering condition determining whether public or private
            challenges will be returned.
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          required: false
          description: Optional parameter filtering challenges by tags.
      responses:
        '200':
          description: User challenge list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    description: List of challenges from a given user.
                    items:
                      $ref: '#/components/schemas/challenge'
  '/v0/challenges/questionnaires/{questionnaireId}':
    get:
      tags:
        - Challenges
      summary: Retreives all challenges from a given questionnaire
      operationId: getAllChallengesByQuestionnaireId
      description: |
        Retrieves every challenge from a questionnaire by its unique identifier.
      parameters:
        - in: path
          name: questionnaireId
          schema:
            type: integer
          required: true
          description: Questionnaire unique id.
      responses:
        '200':
          description: Challenge
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/challenge'
  '/v0/challenges/{challengeId}/answers/{userId}':
    get:
      tags:
        - Challenges
      summary: Retreives a challenge answer
      operationId: getChallengeAnswer
      description: |
        Retrieves every challenge answer of the user for a specific challenge.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User unique id.
      responses:
        '200':
          description: Challenge answer
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/challengeAnswer'
  '/v0/challengeAnswers':
    post:
      tags:
        - Challenge Answer
      summary: Creates a challenge answer
      operationId: createsChallengeAnswer
      description: |
        Creates a challenge answer.
      requestBody:
        description: Challenge answer to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/challengeAnswerNoID'
      responses:
        '201':
          description: Successfully created challenge answer.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/challengeAnswer'
  '/v0/challengeAnswers/{challengeAnswerId}':
    put:
      tags:
        - Challenge Answer
      summary: Updates a challenge answer
      operationId: updateChallengeAnswer
      description: |
        Updates a challenge answer.
      parameters:
        - in: path
          name: challengeAnswerId
          schema:
            type: integer
          required: true
          description: Challenge answer unique id.
      requestBody:
        description: Challenge to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/challengeAnswerNoID'
      responses:
        '200':
          description: Successful updated challenge answer.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/challengeAnswer'
    delete:
      tags:
        - Challenge Answer
      summary: Deletes a challenge answer
      operationId: deleteChallengeAnswer
      description: |
        Delete a challenge answer of the used for a specific challenge.
      parameters:
        - in: path
          name: challengeAnswerId
          schema:
            type: integer
          required: true
          description: Challenge answer unique id.
      responses:
        '204':
          description: Successful deleted challenge answer.
          content:
            application/json:
              schema:
                type: object
  '/v0/challenges/{challengeId}/tags':
    get:
      tags:
        - Challenge Tags
      summary: Retreives all challenge tags from a challenge
      operationId: getAllChallengeTagsByChallengeId
      description: |
        Retrieves every challenge tag associated to a specific challenge.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
      responses:
        '200':
          description: List of tags.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    description: List of challenges.
                    items:
                      $ref: '#/components/schemas/challengeTag'
    post:
      tags:
        - Challenge Tags
      summary: Associates a tag with a Challenge
      operationId: createsChallengeTag
      description: |
        Associates a tag with a specific challenge.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
      requestBody:
        description: Challenge tag to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/challengeTagInputModel'
      responses:
        '201':
          description: Successful challenge tag created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/challengeTag'
  '/v0/challenges/{challengeId}/tags/{tagId}':
    get:
      tags:
        - Challenge Tags
      summary: Retreives specific challenge tag from a challenge
      operationId: getAllChallengeTagsByChallengeIdAnTagText
      description: >
        Retrieves challenge tag associated to a specific challenge with a
        specific tag id.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
        - in: path
          name: tagId
          schema:
            type: integer
          required: true
          description: Tag unique id.
      responses:
        '200':
          description: Specific challenge tag.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    description: Challenge tag.
                    items:
                      $ref: '#/components/schemas/challengeTag'
    delete:
      tags:
        - Challenge Tags
      summary: Delete specific challenge tag from a challenge
      operationId: deleteAllChallengeTagsByChallengeIdAnTagText
      description: >
        Delete challenge tag associated to a specific challenge with a specific
        tag id.
      parameters:
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge unique id.
        - in: path
          name: tagId
          schema:
            type: integer
          required: true
          description: Tag unique id.
      responses:
        '204':
          description: Successful deleted challenge tag.
          content:
            application/json:
              schema:
                type: object
  '/v0/tags':
    get:
      tags:
        - Tags
      summary: Retreives all tags
      operationId: getAllTags
      description: |
        Retrieves every tag.
      responses:
        '200':
          description: Tag list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: array
                    description: Tag list.
                    items:
                      $ref: '#/components/schemas/tag'
                      
##################################
#         QUESTIONNAIRES         #
##################################
  '/v0/questionnaires':
    post:
      tags:
        - Questionnaires
      summary: Creates a questionnaire
      operationId: createQuestionnaire
      description: |
        Creates a questionnaire based on payload content.
      requestBody:
        description: Questionnaire to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaireModel'
      responses:
        '201':
          description: Successful questionnaire created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaire'
  '/v0/questionnaires/withChallenges':
    post:
      tags:
        - Questionnaires
      summary: Creates a questionnaire with challenges
      operationId: createQuestionnaireWithChallenges
      description: |
        Creates a questionnaire based on payload content.
      requestBody:
        description: Questionnaire to be created, and the challenges to associate to it.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaireWithChallengesModel'
      responses:
        '201':
          description: Successful questionnaire created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaire'
  '/v0/questionnaires/{questionnaireId}':
    get:
      tags:
        - Questionnaires
      summary: Retrieves a questionnaire
      operationId: getQuestionnaireById
      description: |
        Retrieves a single questionnaire by its unique identifer.
      parameters:
        - in: path
          name: questionnaireId
          schema:
            type: integer
          required: true
          description: Questionnaire unique identifer.
      responses:
        '200':
          description: Questionnaire
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaire'
    put:
      tags:
        - Questionnaires
      summary: Updates a questionnaire
      operationId: updateQuestionnaireById
      description: |
        Updates a questionnaire by its unique identifier.
      parameters:
        - in: path
          name: questionnaireId
          schema:
            type: integer
          required: true
          description: Questionnaire unique identifer.
      requestBody:
        description: Questionnaire to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaireModel'
      responses:
        '200':
          description: Successful updated questionnaire.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaire'
    delete:
      tags:
        - Questionnaires
      summary: Deletes a questionnaire
      operationId: deleteQuestionnaireById
      description: |
        Delete a questionnaire by its unique identifier.
      parameters:
        - in: path
          name: questionnaireId
          schema:
            type: integer
          required: true
          description: Questionnaire unique identifer.
      responses:
        '204':
          description: Successful deleted questionnaire.
          content:
            application/json:
              schema:
                type: object
  '/v0/questionnaires/users/{userId}':
    get:
      tags:
        - Questionnaires
      summary: Retrieves all questionnaires of specified user
      operationId: getAllUserQuestionnaires
      description: |
        Retrieves a collection of questionnaires by its creator unique identifer.
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User unique identifer.
      responses:
        '200':
          description: User's questionnaire collection.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaire'
  '/v0/questionnaireInstances':
    post:
      tags:
        - Questionnaire Instances
      summary: Creates a questionnaire instance
      operationId: createQuestionnaireInstance
      description: |
        Creates a questionnaire instance based on payload content.
      requestBody:
        description: Questionnaire instance to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaireInstanceModel'
      responses:
        '201':
          description: Successful questionnaire instance created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireInstance'
  '/v0/questionnaireInstances/{questionnaireInstanceId}':
    get:
      tags:
        - Questionnaire Instances
      summary: Retrieves a questionnaire instance
      operationId: getQuestionnaireInstanceById
      description: |
        Retrieves a single questionnaire instance by its unique identifer.
      parameters:
        - in: path
          name: questionnaireInstanceId
          schema:
            type: integer
          required: true
          description: Questionnaire instance unique identifer.
      responses:
        '200':
          description: Questionnaire instance.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireInstance'
    put:
      tags:
        - Questionnaire Instances
      summary: Updates a questionnaire instance
      operationId: updateQuestionnaireInstanceById
      description: |
        Updates a questionnaire instance by its unique identifier.
      parameters:
        - in: path
          name: questionnaireInstanceId
          schema:
            type: integer
          required: true
          description: Questionnaire instance unique identifer.
      requestBody:
        description: Questionnaire instance to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaireInstanceModel'
      responses:
        '200':
          description: Successful updated questionnaire instance.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireInstance'
    delete:
      tags:
        - Questionnaire Instances
      summary: Deletes a questionnaire instance
      operationId: deleteQuestionnaireInstanceById
      description: |
        Delete a questionnaire instance by its unique identifier.
      parameters:
        - in: path
          name: questionnaireInstanceId
          schema:
            type: integer
          required: true
          description: Questionnaire instance unique identifer.
      responses:
        '204':
          description: Successful deleted questionnaire instance.
          content:
            application/json:
              schema:
                type: object
  '/v0/questionnaireInstances/solve/{questionnaireInstanceUuid}':
    get:
      tags:
        - Questionnaire Instances
      summary: Retrieves a questionnaire instance
      operationId: getQuestionnaireInstanceByUuid
      description: |
        Retrieves a single questionnaire instance by its universal unique identifer.
      parameters:
        - in: path
          name: questionnaireInstanceUuid
          schema:
            type: string
          required: true
          description: Questionnaire instance universal unique identifer.
      responses:
        '200':
          description: Questionnaire instance.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireInstance'
  '/v0/questionnaireInstances/questionnaires/{questionnaireId}':
    get:
      tags:
        - Questionnaire Instances
      summary: Retrieves a all of questionnaire instances from a questionnaire
      operationId: getAllQuestionnaireInstancesByQuestionnaireId
      description: |
        Retrieves a collection of questionnaire instances from a questionnaire by its universal unique identifer.
      parameters:
        - in: path
          name: questionnaireId
          schema:
            type: integer
          required: true
          description: Questionnaire unique identifer.
      responses:
        '200':
          description: Questionnaire's questionnaire instance collection.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireInstance'
  '/v0/questionnaireAnswer':
    post:
      tags:
        - Questionnaire Answers
      summary: Creates a questionnaire answer
      operationId: createQuestionnaireAnswer
      description: |
        Creates a questionnaire answer based on payload content.
      requestBody:
        description: Questionnaire answer to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaireAnswerModel'
      responses:
        '201':
          description: Successful questionnaire answer created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireAnswer'
  '/v0/questionnaireAnswer/{questionnaireAnswerId}':
    get:
      tags:
        - Questionnaire Answers
      summary: Retrieves a questionnaire answer
      operationId: getQuestionnaireAnswerById
      description: |
        Retrieves a single questionnaire answer by its unique identifer.
      parameters:
        - in: path
          name: questionnaireAnswerId
          schema:
            type: integer
          required: true
          description: Questionnaire answer unique identifer.
      responses:
        '200':
          description: Questionnaire answer.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireAnswer'
    put:
      tags:
        - Questionnaire Answers
      summary: Updates a questionnaire answer
      operationId: updateQuestionnaireAnswerById
      description: |
        Updates a questionnaire answer by its unique identifier.
      parameters:
        - in: path
          name: questionnaireAnswerId
          schema:
            type: integer
          required: true
          description: Questionnaire answer unique identifer.
      requestBody:
        description: Questionnaire answer to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaireAnswerModel'
      responses:
        '200':
          description: Successful updated questionnaire answer.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireAnswer'
    delete:
      tags:
        - Questionnaire Answers
      summary: Deletes a questionnaire answer
      operationId: deleteQuestionnaireAnswerById
      description: |
        Delete a questionnaire answer by its unique identifier.
      parameters:
        - in: path
          name: questionnaireAnswerId
          schema:
            type: integer
          required: true
          description: Questionnaire answer unique identifer.
      responses:
        '204':
          description: Successful deleted questionnaire instance.
          content:
            application/json:
              schema:
                type: object
  '/v0/questionnaireAnswer/questionnaireInstances/{questionnaireInstanceId}':
    get:
      tags:
        - Questionnaire Answers
      summary: Retrieves all questionnaire answers from a questionnaire instance
      operationId: getAllQuestionnaireAnswersFromQuestionnaireInstanceById
      description: |
        Retrieves a collection of questionnaire answers from a questionnaire instance by its universal unique identifer.
      parameters:
        - in: path
          name: questionnaireInstanceId
          schema:
            type: integer
          required: true
          description: Questionnaire instance unique identifer.
      responses:
        '200':
          description: Questionnaire answer.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireAnswer'
  '/v0/questionnaireChallenges':
    post:
      tags:
        - Questionnaire-Challenges
      summary: Add one or multiple challenges to a questionnaire
      operationId: addChallengesToQuestionnaire
      description: |
        Add one or multiple challenges to a single questionnaire by theirs unique identifiers.
      requestBody:
        description: Object that groups a collection of challenge ids and a questionnaire id.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaireChallengeModel'
      responses:
        '201':
          description: Successfully added challenges to questionnaire.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireChallenge'
    put:
      tags:
        - Questionnaire-Challenges
      summary: Update challenges on a questionnaire
      operationId: updateChallengesOnQuestionnaire
      description: |
        Update the list of challenges on a single questionnaire.
      requestBody:
        description: Object that groups a collection of challenge ids and a questionnaire id.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionnaireChallengeModel'
      responses:
        '201':
          description: Successfully updated challenges on questionnaire.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireChallenge'
  '/v0/questionnaireChallenges/{questionnaireId}/{challengeId}':
    get:
      tags:
        - Questionnaire-Challenges
      summary: Retrieves all questionnaire answers from a questionnaire instance
      operationId: getQuestionnaireChallengeByChallengeIdAndQuestionnaireId
      description: |
        Retrieves a questionnaire-challenge by the unique combination of a questionnaire and a challenge uniques identifers.
      parameters:
        - in: path
          name: questionnaireId
          schema:
            type: integer
          required: true
          description: Questionnaire unique identifer.
        - in: path
          name: challengeId
          schema:
            type: integer
          required: true
          description: Challenge instance unique identifer.
      responses:
        '200':
          description: Questionnaire-Challenge.
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    $ref: '#/components/schemas/questionnaireChallenge'
  '/v0/questionnaireChallenges/{questionnaireId}':
    delete:
      tags:
        - Questionnaire-Challenges
      summary: Remove all challenges from a questionnaire
      operationId: removeAllChallengesFromQuestionnaire
      description: |
        Remove one or multiple challenges to a single questionnaire by theirs unique identifiers.
      parameters:
        - in: path
          name: questionnaireId
          schema:
            type: integer
          required: true
          description: Questionnaire unique identifer.
      responses:
        '204':
          description: Successful removed challenges from questionnaire.
          content:
            application/json:
              schema:
                type: object
  '/v0/codeLanguages':
    get:
      tags:
        - Code Languages
      summary: Retrieves all supported code languages
      operationId: getCodeLanguages
      description: |
        Retrieves a complete list of all the programming languages supported for execution.
      responses:
        '200':
          description: List of Code Languages.
          content:
            application/json:
              schema:
                type: array
                items: 
                    $ref: '#/components/schemas/codeLanguage'
components:
  schemas:
    executable:
      type: object
      required:
        - code
        - executeTests
      properties:
        code:
          type: string
          example: >-
            public class code { public static void main(String[] args) {
            System.out.println(\"Hello World\");}}
          description: >-
            Code must be ready to execute in typical execution format depending
            on language
        unitTests:
          type: string
          example: >-
            import org.junit.Assert;import org.junit.Test;public class unitTests
            {@Test public void TestCase1() {Assert.assertTrue(true);}}
          description: >-
            Unit Tests must be ready to execute in typical execution format
            depending on language
        executeTests:
          type: boolean
          example: true
          description: >-
            If the value is true unit tests will be executed and its result will
            be returned, for false values the code will be executed without the
            unit tests.
    executableWithLanguage:
      type: object
      required:
        - language
        - code
        - executeTests
      properties:
        language:
          type: string
          enum:
            - java
            - kotlin
            - javascript
            - csharp
            - python
          example: java
          description: 'Text representing one of the supported languages, must be lowercase'
        code:
          type: string
          example: >-
            public class code { public static void main(String[] args) {
            System.out.println(\"Hello World\");}}
          description: >-
            Code must be ready to execute in typical execution format depending
            on language
        unitTests:
          type: string
          example: >-
            import org.junit.Assert;import org.junit.Test;public class unitTests
            {@Test public void TestCase1() {Assert.assertTrue(true);}}
          description: >-
            Unit Tests must be ready to execute in typical execution format
            depending on language
        executeTests:
          type: boolean
          example: true
          description: >-
            If the value is true unit tests will be executed and its result will
            be returned, for false values the code will be executed without the
            unit tests.
    executionResult:
      type: object
      required:
        - rawResult
        - wasError
        - executionTime
      properties:
        rawResult:
          type: string
          example: >- 
            Hello World
          description: >-
            raw result of executed code
        wasError:
          type: boolean
          example: true
          description: >-
            Boolean value indicating whether the code was executed successfully or with error.
        executionTime:
          type: number
          example: 89
          description: >-
            Time elapsed during execution of code in millisencods.
    user:
      type: object
      properties:
        userId: 
          type: integer
          example: 523
          description: Unique id which uniquely identifies the user
        username:
          type: string
          example: "userOne"
          description: Unique string used to identify an user
        email:
          type: string
          example: "userOne@example.com"
          description: Email address which can be used to contact user
        name:
          type: string
          example: "John Doe"
          description: User's given name
    updatePassword:
      type: object
      required:
        - password
      properties:
          password:
            type: string
            example: "password12345"
            description: string used for User's authentication
    updateProfile:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: "John Doe"
          description: User's given name
        email:
          type: string
          example: "userOne@example.com"
          description: Email address which can be used to contact user
    codeLanguage:
      type: object
      required:
        - languageId
        - codeLanguage
      properties:
        languageId:
          type: integer
          example: 523
          description: Integer representing unique language id.
        codeLanguage:
          type: string
          example: "kotlin"
          description: Test representing the label of the language.
##################################
#           CHALLENGES           #
##################################
    challenge:
      type: object
      required:
        - challengeID
        - challengeText
        - isPrivate
        - solutions
      properties:
        challengeID:
          type: integer
          example: 548
          description: Unique identifier of challenge.
        challengeText:
          type: string
          example: 'Implement Hello world, by printing Hello world into the console.'
          description: Test describing the challenge and its goal.
        isPrivate:
          type: boolean
          example: true
          description: >-
            Boolean value indicating whether the challenge can only be seen by
            its creator.
        solutions:
          type: array
          description: List of challenges.
          items:
            $ref: '#/components/schemas/solution'
    challengeNoId:
      type: object
      required:
        - challengeText
        - isPrivate
        - solutions
      properties:
        challengeText:
          type: string
          example: 'Implement Hello world, by printing Hello world into the console.'
          description: Test describing the challenge and its goal.
        isPrivate:
          type: boolean
          example: true
          description: >-
            Boolean value indicating whether the challenge can only be seen by
            its creator
        solutions:
          type: array
          description: List of challenges.
          items:
            $ref: '#/components/schemas/solution'
    challengeNoIdNoSolutionID:
      type: object
      required:
        - challengeText
        - isPrivate
        - solutions
      properties:
        challengeText:
          type: string
          example: 'Implement Hello world, by printing Hello world into the console.'
          description: Test describing the challenge and its goal.
        isPrivate:
          type: boolean
          example: true
          description: >-
            Boolean value indicating whether the challenge can only be seen by
            its creator
        solutions:
          type: array
          description: List of challenges.
          items:
            $ref: '#/components/schemas/solutionNoID'
    solution:
      type: object
      required:
        - solutionId
        - codeLanguage
        - challengeCode
        - solutionCode
        - unitTests
      properties:
        solutionId:
          type: integer
          example: 79884
          description: Unique id to which uniquely identifies the solution.
        codeLanguage:
          type: string
          example: java
          description: Text specifying in which language the solution is.
        challengeCode:
          type: string
          example: 'public class code { public static void main(String[] args) { }}'
          description: Default code of the code presented to user.
        solutionCode:
          type: string
          example: >-
            public class code { public static void main(String[] args) {
            System.out.println(\"Hello World\");}}
          description: Solution of the challenge.
        unitTests:
          type: string
          example: >-
            import org.junit.Assert;import org.junit.Test;public class unitTests
            {@Test public void TestCase1() {Assert.assertTrue(true);}}
          description: Unit tests to which the the user submitted will be tested against.
    solutionNoID:
      type: object
      required:
        - codeLanguage
        - challengeCode
        - solutionCode
        - unitTests
      properties:
        codeLanguage:
          type: string
          example: java
          description: Text specifying in which language the solution is.
        challengeCode:
          type: string
          example: 'public class code { public static void main(String[] args) { }}'
          description: Default code of the code presented to user.
        solutionCode:
          type: string
          example: >-
            public class code { public static void main(String[] args) {
            System.out.println(\"Hello World\");}}
          description: Solution of the challenge.
        unitTests:
          type: string
          example: >-
            import org.junit.Assert;import org.junit.Test;public class unitTests
            {@Test public void TestCase1() {Assert.assertTrue(true);}}
          description: Unit tests to which the the user submitted will be tested against.
    challengeAnswer:
      type: object
      required:
        - challengeAnswerId
        - challengeId
        - userID
        - codeLanguage
        - answerCode
        - unitTests
        - isCorrect
      properties:
        challengeAnswerId:
          type: integer
          example: 6546
          description: Unique id to which uniquely identify the challenge answer.
        challengeId:
          type: integer
          example: 55874
          description: Unique challenge id to which the answer belongs to.
        userID:
          type: integer
          example: 54954
          description: Unique user id of user to which the answer belongs to.
        codeLanguage:
          type: string
          example: Java
          description: Text identifying the programming language of the answer.
        answerCode:
          type: string
          example: >-
            public class code { public static void main(String[] args) {
            System.out.println(\"Hello World\");}}
          description: Solution of the challenge submitted.
        unitTests:
          type: string
          example: >-
            import org.junit.Assert;import org.junit.Test;public class unitTests
            {@Test public void TestCase1() {Assert.assertTrue(true);}}
          description: Unit tests developed by the user.
        isCorrect:
          type: boolean
          example: true
          description: Boolean indicating if this answer is correct or not.
    challengeAnswerNoID:
      type: object
      required:
        - challengeId
        - userID
        - codeLanguage
        - answerCode
        - unitTests
        - isCorrect
      properties:
        challengeId:
          type: integer
          example: 55874
          description: Unique challenge id to which the aswer belongs to.
        userID:
          type: integer
          example: 54954
          description: Unique user id of user to which the aswer belongs to.
        codeLanguage:
          type: string
          example: Java
          description: Text identifying the programming language of the answer.
        answerCode:
          type: string
          example: >-
            public class code { public static void main(String[] args) {
            System.out.println(\"Hello World\");}}
          description: Solution of the challenge submitted.
        unitTests:
          type: string
          example: >-
            import org.junit.Assert;import org.junit.Test;public class unitTests
            {@Test public void TestCase1() {Assert.assertTrue(true);}}
          description: Unit tests developed by the user.
        isCorrect:
          type: boolean
          example: true
          description: Boolean indicating if this answer is correct or not.
    challengeTag:
      type: object
      required:
        - challengeTagId
        - challengeId
        - tag
      properties:
        challengeTagId:
          type: integer
          example: 55874
          description: Unique challenge tag id.
        challengeId:
          type: integer
          example: 55874
          description: Unique challenge id to which the tag belongs to.
        tag:
          $ref: '#/components/schemas/tag'
    tag:
      type: object
      required:
        - tagId
        - tag
      properties:
        tagId:
          type: integer
          example: 55874
          description: Unique tag id.
        tag:
          type: string
          example: Array
          description: Unique tag text.
    challengeTagInputModel:
      type: object
      required:
        - tag
      properties:
        tag:
          type: string
          example: Array
          description: Unique tag text.
          
##################################
#         QUESTIONNAIRES         #
##################################
    questionnaire:
      type: object
      required:
        - questionnaireId
        - description
        - timer
        - creatorId
        - creationDate
      properties:
        questionnaireId:
          type: integer
          example: 21313
          description: questionnaire unique identifier.
        description:
          type: string
          example: Questionnaire for course PS-1920SV
          description: Text describing the questionnaire.
        timer:
          type: number
          example: 360000
          description: >-
            Time in milliseconds which an user has to solve the questionnaire.
            If value is NULL has no time limite.
        creatorId:
          type: integer
          example: 44598
          description: Unique user identifier of user who created the questionnaire.
        creationDate:
          type: string
          example: '2020/05/12'
          description: questionnaire's creation date in yyyy-MM-dd format
    questionnaireModel:
      type: object
      required:
        - description
        - timer
        - creatorId
      properties:
        description:
          type: string
          example: Questionnaire for course PS-1920SV
          description: Text describing the questionnaire.
        timer:
          type: number
          example: 360000
          description: >-
            Time in milliseconds which an user has to solve the questionnaire.
            If value is NULL has no time limite.
        creatorId:
          type: integer
          example: 44598
          description: Unique user identifier of user who created the questionnaire.
    questionnaireWithChallengesModel:
      type: object
      required:
        - questionnaire
        - challenges
      properties:
        questionnaire:
          $ref: '#/components/schemas/questionnaireModel'
        challenges:
          type: array
          items:
            $ref: '#/components/schemas/questionnaireChallengeCollectionModel'
    questionnaireInstance:
      type: object
      required:
        - questionnaireId
        - questionnaireInstanceId
        - questionnaireInstanceUuid
        - description
        - timer
        - startTimestamp
        - endTimestamp
        - isFinished
      properties:
        questionnaireInstanceId:
          type: integer
          example: 85674
          description: Questionnaire instance unique identifier.
        questionnaireId:
          type: integer
          example: 2213
          description: Questionnaire unique identifier.
        questionnaireInstanceUuid:
          type: string
          example: 'c2c19e60-c32c-4413-84fc-369d6603d5be'
          description: Questionnaire universal unique identifier.
        description:
          type: string
          example: Questionnaire for course PS-1920SV and class LI61N 
          description: Text describing the questionnaire instance.
        timer:
          type: number
          example: 1800000
          description: >-
            Time in milliseconds which an user has to solve the questionnaire instance.
            If value is NULL has no time limite.
        startTimestamp:
          type: number
          example: 231231230000000
          description: >- 
            Time in milliseconds that user started solving the questionnaire instance.
        endTimestamp:
          type: number
          example: 231231231800000
          description: >-
            Time in milliseconds that user finished solving the questionnaire instance.
        isFinished:
          type: boolean
          example: false
          description: Indicates if user can still access questionnaire instance.
    questionnaireInstanceModel:
      type: object
      required:
        - questionnaireId
        - questionnaireInstanceUuid
        - description
        - timer
        - isFinished
      properties:
        questionnaireId:
          type: integer
          example: 2213
          description: Questionnaire unique identifier.
        questionnaireInstanceUuid:
          type: string
          example: 'c2c19e60-c32c-4413-84fc-369d6603d5be'
          description: Questionnaire universal unique identifier.
        description:
          type: string
          example: Questionnaire for course PS-1920SV and class LI61N 
          description: Text describing the questionnaire instance.
        timer:
          type: number
          example: 1800000
          description: >-
            Time in milliseconds which an user has to solve the questionnaire instance.
            If value is NULL has no time limite.
        isFinished:
          type: boolean
          example: true
          description: Indicates if user can still access questionnaire instance
    questionnaireChallenge:
      type: object
      required:
        - questionnaireChallengeId
        - questionnaire
        - challenge
        - languageFilter
      properties:
        questionnaireChallengeId:
          type: integer
          example: 2342
          description: Unique identifier of questionnaire-challenge.
        questionnaire:
          $ref: '#/components/schemas/questionnaire'
        challenge:
          $ref: '#/components/schemas/challenge'
        languageFilter:
          type: string
          example: 'java,javascript,python'
          description: >-
            Programming languages allowed to be used to solve the questionnaire challenge, separeted by commas.
    questionnaireChallengeModel:
      type: object
      required:
        - questionnaireId
        - challenges
      properties:
        questionnaireId:
          type: integer
          example: 54954
          description: Unique identifier of questionnaire.
        challenges:
          type: array
          items:
            $ref: '#/components/schemas/questionnaireChallengeCollectionModel'
          description: Unique identifier of challenge.
        languageFilter:
          type: string
          example: 'java,javascript,python'
          description: >-
            Programming languages allowed to be used to solve the questionnaire challenge, separeted by commas.
    questionnaireChallengeCollectionModel:
      type: object
      required:
        - challengeId
        - languageFilter
      properties:
        challengeId:
          type: integer
          example: 2342
          description: Unique identifier of challenge.
        languageFilter:
          type: string
          example: 'java,javascript,python'
          description: >-
            Programming languages allowed to be used to solve the questionnaire challenge, separeted by commas.
    questionnaireAnswer:
      type: object
      required:
        - questionnaireAnswerId
        - questionnaireInstanceId
        - questionnaireChallengeId
        - answer
      properties:
        questionnaireAnswerId:
          type: integer
          example: 2131
          description: Unique identifier of questionnaire answer.
        questionnaireInstanceId:
          type: integer
          example: 55874
          description: Unique identifier of questionnaire instance.
        questionnaireChallengeId:
          type: integer
          example: 4467
          description: Unique identifier of questionnaire-challenge.
        answer:
          $ref: '#/components/schemas/Answer'
    questionnaireAnswerModel:
      type: object
      required:
        - questionnaireId
        - questionnaireInstanceId
        - challengeId
        - answer
      properties:
        questionnaireId:
          type: integer
          example: 2131
          description: Unique identifier of questionnaire.
        questionnaireInstanceId:
          type: integer
          example: 55874
          description: Unique identifier of questionnaire instance.
        challengeId:
          type: integer
          example: 44
          description: Unique identifier of challenge.
        answer:
          $ref: '#/components/schemas/AnswerModel'
    Answer:
      type: object
      required:
        - answerId
        - codeLanguage
        - answerCode
        - unitTests
        - isCorrect
      properties:
        questionnaireInstanceId:
          type: integer
          example: 55874
          description: Unique identifier of answer.
        codeLanguage:
          type: string
          example: "java"
          description: Text identifying the programming language name.
        answerCode:
          type: string
          example: >-
            public class code { public static void main(String[] args) {
            System.out.println(\"Hello World\");}}
          description: Submitted answer.
        unitTests:
          type: string
          example: >-
            import org.junit.Assert;import org.junit.Test;public class unitTests
            {@Test public void TestCase1() {Assert.assertTrue(true);}}
          description: Unit tests developed by the user.
        isCorrect:
          type: boolean
          example: false
          description: Indicates if submitted answer matches the solution.
    AnswerModel:
      type: object
      required:
        - codeLanguage
        - answerCode
        - unitTests
      properties:
        codeLanguage:
          type: string
          example: "java"
          description: Text identifying the programming language name
        answerCode:
          type: string
          example: >-
            public class code { public static void main(String[] args) {
            System.out.println(\"Hello World\");}}
          description: Submited answer.
        unitTests:
          type: string
          example: >-
            import org.junit.Assert;import org.junit.Test;public class unitTests
            {@Test public void TestCase1() {Assert.assertTrue(true);}}
          description: Unit tests developed by the user.
          
