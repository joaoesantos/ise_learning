{"version":3,"sources":["logo.svg","components/UserProfile.js","components/Challenges.js","components/Home.js","components/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UserProfile","state","username","name","email","id","fetch","then","response","json","setState","this","React","Component","Challenges","Home","NoMatch","App","data","userId","className","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,4ICsC5BC,G,iNAnCXC,MAAQ,CACJC,SAAS,GACTC,KAAK,GACLC,MAAM,GACNC,GAAI,G,mFAGY,IAAD,OACfC,MAAM,YACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKC,SACf,CACIR,SAAUO,EAAKP,SACfC,KAAMM,EAAKN,KACXC,MAAOK,EAAKL,MACZC,GAAII,EAAKJ,U,+BAKjB,OACI,6BACI,0CACgBM,KAAKV,MAAME,MAE3B,4BACI,yCAAeQ,KAAKV,MAAMC,UAC1B,qCAAWS,KAAKV,MAAMG,OACtB,kCAAQO,KAAKV,MAAMI,U,GA7BbO,IAAMC,YCkBjBC,E,2MAjBXb,MAAQ,G,wEAKL,OAAO,6BACH,kDACE,4BACI,2CACA,2CACA,iD,GAXQW,IAAMC,WCmBhBE,E,2MAlBXd,MAAQ,G,wEAKJ,OACI,6BACI,oCAGA,kD,GAXGW,IAAMC,WCYVG,E,iLAVP,OACI,6BACI,wC,GAJMJ,IAAMC,W,gBC0CbI,G,iNA5BbhB,MAAQ,CACNiB,KAAM,GACNC,OAAQ,G,wEAIR,OACE,kBAAC,IAAD,KACE,wBAAIC,UAAU,UACV,4BAAI,kBAAC,IAAD,CAASC,GAAG,KAAZ,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAE,mBAAcV,KAAKV,MAAMkB,SAApC,YACJ,4BAAI,kBAAC,IAAD,CAASE,GAAG,eAAZ,gBAER,yBAAKD,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,WAAWC,UAAWxB,IAClC,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,cAAcC,UAAWV,IAC3C,kBAAC,IAAD,CAAOU,UAAWR,W,GApBZJ,IAAMC,YCFJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.53e5c8be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\"\r\n\r\nclass UserProfile extends React.Component{\r\n    state = {\r\n        username:\"\",\r\n        name:\"\",\r\n        email:\"\",\r\n        id: 0\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('/users/2')\r\n        .then(response => response.json())\r\n        .then(json => this.setState(\r\n            {\r\n                username: json.username,\r\n                name: json.name,\r\n                email: json.email,\r\n                id: json.id\r\n            }))\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>\r\n                    Profile of {this.state.name}\r\n                </h1>\r\n                <ul>\r\n                    <li>username: {this.state.username}</li>\r\n                    <li>email:{this.state.email}</li>\r\n                    <li>id:{this.state.id}</li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserProfile","import React from \"react\"\r\n\r\nclass Challenges extends React.Component{\r\n    state = {\r\n\r\n    }\r\n    \r\n    render(){\r\n       return(<div>\r\n           <h3>List of Challenges</h3>\r\n             <ul>\r\n                 <li>Challenge 1</li>\r\n                 <li>Challenge 2</li>\r\n                 <li>Challenge 3</li>\r\n             </ul>\r\n        </div>\r\n       )\r\n    }\r\n}\r\n\r\nexport default Challenges","import React from \"react\"\r\n\r\nclass Home extends React.Component{\r\n    state = {\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>\r\n                    Home\r\n                </h1>\r\n                <p>\r\n                    Same text here\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from \"react\"\r\n\r\nclass NoMatch extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>\r\n                    404\r\n                </h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NoMatch","import React from 'react';\nimport logo from './logo.svg';\nimport UserProfile from './components/UserProfile'\nimport Challenges from './components/Challenges'\nimport Home from './components/Home'\nimport NoMatch from './components/NoMatch'\nimport {\n  Route,\n  NavLink,\n  HashRouter,\n  Switch\n} from \"react-router-dom\";\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    data: {},\n    userId: 1\n  }\n\n  render(){\n    return (\n      <HashRouter>\n        <ul className=\"header\">\n            <li><NavLink to=\"/\">Home</NavLink></li>\n            <li><NavLink to={`/profile/${this.state.userId}`}>Profile</NavLink></li>\n            <li><NavLink to=\"/challenges\">Challenges</NavLink></li>\n          </ul>\n        <div className=\"content\">\n          <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/profile\" component={UserProfile}/>\n            <Route exact path=\"/challenges\" component={Challenges}/>\n            <Route component={NoMatch}/>\n          </Switch>\n        </div>\n      </HashRouter>\n      \n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}