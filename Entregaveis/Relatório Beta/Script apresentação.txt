Slide 1 (1:30) - functionalities & web client - Quintela
	Motivation
	Functionalities
		Execute Multilanguage coding challenges
		User account
		Questionnaires
	User Friendly
	3 Modules
	React + Material UI
Slide 2 (1:30) - Services - Santos
	Serviços - Kotlin + Gradle + Spring
	DB - Postgres
	Modulos
		Challenges
		Questionnaires
		User
		Authentication
		Execute Code (serve de ponte para ultimo slide)
Slide 3 (1:30) - Execution Environments - Rodrigo
	5 Linguagens, 1 contentor por linguagem
		Como podem ver na imagem estam previstos ambientes de execução para 5 linguagens diferentes: Java, Kotlin, JavaScript, C# e Python
	Falar do docker e containers
		Cada um destes ambientes de execução será um conjunto de contentores capazes de executar codigo numda dada linguagem. Se não houvesse escalabilidade seria apenas 1 contentor por linguagem, mas ter em conta a escalabilidade da solução poderam haver vários. Isto é separado por ambiente de execução para manter a infraestrutura mais leve no contentor, deste modo o contentos so precisa de ter o absolutamente necessário para executar uma dada linguagem.
	Falar de como instanciamos a cena, aplicação que executa cenas no ambiente
		Como é que isto será gerido? Para cada ambiente de execução haverá uma aplicação desenvolvida na linguagem que se pretende executar, e.g. no ambiente de execução de java a aplicação será em Java. E esta aplicação expõe um endpoint HTTP que respeitará um contrato comum entres todos os ambientes de execução em que recebe código a ser executado, compila o codigo se necessário e devolve o resultado da execução ou o erro que ocorreu se for o caso.
-----------------------------------------------------------------------------------
FAQ
1 - Razão de termos ambientes de execução cada aplicação na sua linguagem?
R: Contentores mais leves, sendo que tem contentor com 1 ambiente da linageum a executar que é o mesmo da aplicação. e porque de um ponto de vista pedagogico queriamos trabalhar com mais tecnologias diferentes/novas
2 - Como vamos gerir a escalabilidade? 
R: ainda não decidimos a solução, mas algumas das hipóteses são:
- Cloud Run, solução serveless da GCP autoescalavel
- Filas de espera que permitem um buffer em resposta de picos de pedidos
- Kubernetes cluster
3 - Porque uma relacional?
R: Decidimos optar por uma solução que garantisse mais fácilmente a normalização e consistência dos dados, por oposição a bases de dados não relacionais.
4 - Como proteger contra ciclos infinitos?
R: Ter timer para controlar tempo máximo de execução.
5 - Como implementar autenticação?
R: Autenticação básica, não implementada.
6 - Segurança do contentor face a ataque?
R: Bloqueamos a nível de rede chamadas para fora do contentor.
7 - Porque é que não há testes unitários?
R: Devido a constrangimentos de gestão de tempo para desenvolvimento, face ao semestre atípico no qual estamos com trabalhos para outras cadeiras e a trabalhar ao mesmo tempo deixamos o desenolvimento de testes unitários para uma fase mais tardia.
Porém existem scripts de teste de DB, e coleções de postman que permitem testar partes da aplicação com alguma facilidade.